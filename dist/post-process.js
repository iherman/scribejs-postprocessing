#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * ## Specific entry point for local run, relying on some local for finding the configuration file.
 *
 * See [[main]] for details.
 *
 * @packageDocumentation
*/
const main_1 = require("./main");
const commander_1 = require("commander");
/** @internal */
const program = new commander_1.Command();
/**
 * Directory collecting the local configuration files. This may have to be adapted to a local setup
 */
const LOCAL_CONFIGS = '/Users/ivan/W3C/github/Tools/scribejs/BrowserView/Groups/configurations/';
/**
 * (Github) URL where the configuration files are available locally
 */
const GITHUB_CONFIGS = 'https://w3c.github.io/scribejs/BrowserView/Groups/configurations/';
/**
 * Extra utility: define a simple top level interface to post-process based on a particular configuration: the configuration is extracted from the
 * `scribejs` repository and a local version of each is extracted using a simple naming scheme: adding a `_local` to the 'global' configuration file name.
 *
 * @async
 */
async function run() {
    // Get the arguments
    program
        .name('post-process')
        .usage('[options] [configuration_file]')
        .description('Post-process minutes generated by scribejs.')
        .option('-g, --group [group]', 'group id, identifying a predefined configuration file in the "scribejs" repository.')
        .option('-l, --local', 'process local repository clones instead of directly on github.')
        .option('-d, --date [date]', 'date of the meeting in ISO (i.e., YYYY-MM-DD) format, defaults to current date')
        .option('-m, --mail', 'send email instead of "real" postprocessing')
        .parse(process.argv);
    try {
        let name;
        if (program.args.length === 0) {
            if (!program.group) {
                console.error('No group has been provided');
                process.exit(-1);
            }
            const wg = program.group.split('-')[0];
            name = (program.local) ? `${LOCAL_CONFIGS}${wg}.json` : `${GITHUB_CONFIGS}${wg}.json`;
        }
        else {
            name = program.args[0];
        }
        await main_1.main(name, program);
    }
    catch (e) {
        console.error(`${e.stack}`);
    }
}
run();
//# sourceMappingURL=post-process.js.map