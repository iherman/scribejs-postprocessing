#!/usr/bin/env ts-node-script
/**
 * ## Main entry point
 * 
 * See [[main]] for details.
 *
 * @packageDocumentation
*/
import { Repo, GithubRepo, LocalRepo   } from './lib/types';
import { LOCAL_CONFIGS, GITHUB_CONFIGS } from './lib/config';
import { process_minutes }               from './lib/repos';

import { Command } from 'commander';
/** @internal */
const program = new Command();

import * as node_fetch from 'node-fetch';
/** @internal */
const fetch = node_fetch.default;

import * as fs from 'fs';
/** @internal */
const fsp = fs.promises;

/**
 * Entry point: get hold of the configuration file (taking into account the value of the `--local` flag),
 * and start processing via [[process_minutes]].
 * 
 * @async
 */
async function main() {
    const get_config = async (local: boolean, name: string): Promise<Repo> => {
        if (local) {
            const data = await fsp.readFile(name, 'utf-8');
            return JSON.parse(data) as LocalRepo;
        } else {
            return await fetch(name).then((res) => res.json()) as GithubRepo;
        }    
    }

    // Get the arguments
    program
        .name('post-process')
        .usage('[options] [group]')
        .description('Post-process minutes generated by scribejs')
        .option('-l --local', 'process local repository clones instead of directly on github')
        .parse(process.argv);

    try {
        if (program.args.length === 0) {
            console.error("post-process error: no group has been identified")
            process.exit(-1);
        } else {
            const group = program.args[0];
            const name = (program.local) ? `${LOCAL_CONFIGS}${group}_local.json`: `${GITHUB_CONFIGS}${group}.json`;
            const config = await get_config(program.local, name);
            await process_minutes(program.local, config);
        }    
    } catch (e) {
        console.error(`Exception raised: ${e.stack}`);
    }
}

main();

