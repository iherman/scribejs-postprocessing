#!/usr/bin/env node
/**
 * ## Specific entry point for local run, relying on some local for finding the configuration file.
 * 
 * See [[main]] for details.
 *
 * @packageDocumentation
*/
import { main }    from './index';
import { Command } from 'commander';
/** @internal */
const program = new Command();

/**
 * Directory collecting the local configuration files
 */
const LOCAL_CONFIGS  = '/Users/ivan/W3C/github/Tools/scribejs/BrowserView/Groups/postprocessing/';

/**
 * (Github) URL where the configuration files are available locally
 */
const GITHUB_CONFIGS = 'https://w3c.github.io/scribejs/BrowserView/Groups/postprocessing/';


/**
 * Extra utility: define a simple top level interface to post-process based on a particular configuration: the configuration is extracted from the
 * `scribejs` repository and a local version of each is extracted using a simple naming scheme: adding a `_local` to the 'global' configuration file name. 
 * The [[LOCAL_CONFIG]] variable can be adapted to local usage.
 * 
 * @async
 */
async function run() {
    // Get the arguments
    program
        .name('post-process')
        .usage('[options] [configuration_file]')
        .description('Post-process minutes generated by scribejs.')
        .option('-g --group [group]', 'group id, identifying a predefined configuration file in the "scribejs" repository.')
        .option('-l --local', 'process local repository clones instead of directly on github.')
        .parse(process.argv);

    try {
        let name: string;
        if (program.args.length === 0) {
            if (program.group) {
                name = (program.local) ? `${LOCAL_CONFIGS}${program.group}_local.json`: `${GITHUB_CONFIGS}${program.group}.json`;
            } else {
                process.exit(-1);    
            }
        } else {
            name = program.args[0];
        }
        await main(name);
    } catch (e) {
        console.error(`${e.stack}`);
    }
}

run();

